/*
Copyright (c) 2008 Radu Andrei Stefan

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

interface

uses includes;

// this class implements a set of intervals
// supported operations are 
//    adding an intervall add()
//    removing an interval remove()
//    selecting a sub-range
class ranges:public vector<int>
{
public:
	void add(int low, int high);
	void remove(int low, int high);
	void debug_print();
	ranges select(ranges a, int low, int high);
};

implementation

void ranges::add(int low, int high)
{
	int i, start, hiend;
	
	if (low>=high) return;
		
	for (i=0; i<size(); i++) if ((*this)[i]>low) break;
	start=i;
	for (i=start; i<size(); i++) if ((*this)[i]>high) break;
	hiend=i;
	
	if (start==hiend && start%2==1)
	{
		// overlapping with another interval
		return;
	}
	
	if (start==hiend && start%2==0)
	{
		// add at beginning or before another interval
		// quick and dirty
		insert(start,high);
		insert(start,low);
		return;
	}
	if (start==size())
	{
		// add at the end
		push_back(low);
		push_back(high);
		return;
	}
	if (start%2==0)
	{
		(*this)[start]=low;
	}
}

void ranges::remove(int low, int high)
{
}

void ranges::debug_print()
{
	int i;
	fprintf(stderr,"Ranges:");
	assert(i%2==0);
	for (i=0; i<size()-1; i++) assert((*this)[i]<(*this)[i+1]);
	for (i=0; i<size(); i+=2) fprintf(stderr," [%d,%d)",(*this)[i], (*this)[i+1]);
	fprintf(stderr,"\n");
}

ranges ranges::select(ranges a, int low, int high)
{
	ranges res=a;
	a.remove(0,low);
	a.remove(high,0x7fffffff);
}